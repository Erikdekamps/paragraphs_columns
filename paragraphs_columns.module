<?php

/**
 * @file
 * The main module file.
 *
 * Code taken from @link post by jeremypeter.
 *
 * @link: https://www.drupal.org/forum/support/module-development-and-code-questions/2015-06-03/drupal-8-override-template-with#comment-12159763
 */

use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function paragraphs_columns_theme_suggestions_paragraph_alter(&$suggestions, $variables) {

  // Get the information.
  $entity = $variables['elements']['#paragraph'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  $type = $entity->getType();

  // Add the suggestions.
  $suggestions[] = 'paragraph__paragraphs_columns';
  $suggestions[] = 'paragraph__paragraphs_columns__' . $type;
  $suggestions[] = 'paragraph__paragraphs_columns__' . $type . '__' . $sanitized_view_mode;
}

/**
 * Implements hook_theme().
 */
function paragraphs_columns_theme() {

  $theme_templates = [];
  $paragraph_types = _paragraphs_columns_get_paragraph_types();

  foreach ($paragraph_types as $type) {
    $theme_templates['paragraph__paragraphs_columns__' . $type] = [
      'base hook' => 'paragraph',
    ];
  }

  $theme_templates['paragraphs_columns'] = [
    'base hook' => 'paragraph',
  ];

  return $theme_templates;
}

/**
 * Implements hook_theme_registry_alter().
 */
function paragraphs_columns_theme_registry_alter(&$theme_registry) {

  $module_path = drupal_get_path('module', 'paragraphs_columns');
  $template_objects = drupal_find_theme_templates($theme_registry, '.html.twig', $module_path);
  $paragraph_types = _paragraphs_columns_get_paragraph_types();

  // 1. Loop through the paragraph types
  // 2. Check if each paragraph exists in the `$template_objects` array
  // 3. If it doesn't exist, remove it from the registry so we don't get any
  // errors.
  foreach ($paragraph_types as $type) {
    $template = 'paragraphs_columns__' . $type;
    if (!isset($template_objects[$template])) {
      unset($theme_registry['paragraphs_columns__' . $type]);
    }
  }

  // Change the field templates directory.
  $theme_registry['field']['path'] = $module_path . '/templates/field';
}

/**
 * Helper function to get a list of paragraph types by machine name.
 *
 * @return array
 *   Returns a list of paragraph types by machine name.
 */
function _paragraphs_columns_get_paragraph_types() {
  $paragraph_bundles = \Drupal::service('entity_type.bundle.info')
    ->getBundleInfo('paragraph');
  return array_keys($paragraph_bundles);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function paragraphs_columns_preprocess_node(&$variables) {

  // Attach the bootstrap grid.
  if ($variables['node']->getType() === 'paragraphed_page') {
    $variables['#attached']['library'][] = 'paragraphs_columns/bootstrap.grid';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function paragraphs_columns_preprocess_paragraph(&$variables) {

  // Add the column width value.
  $paragraph = $variables['elements']['#paragraph'];
  if ($paragraph->hasField('field_column_width')) {
    $column_width = $paragraph->get('field_column_width')->value;
    if (!empty($column_width) && $column_width == 'auto') {
      $column_width = _paragraphs_columns_calculate_column_width($paragraph);
    }
    $variables['column_width'] = 'col-md-' . $column_width;
  }
}

/**
 * Calculate the column width.
 *
 * @param \Drupal\paragraphs\Entity\Paragraph $paragraph
 *   The paragraph the column is in.
 *
 * @return float
 *   Returns the column width as integer.
 */
function _paragraphs_columns_calculate_column_width(Paragraph $paragraph) {

  // Initialize the starting values.
  $auto_paragraphs = 0;
  $auto_width = 12;

  // Get the wrapper (row) paragraph.
  $pid = $paragraph->get('parent_id')->value;
  $parent_paragraph = Paragraph::load($pid);

  // Check for the columns the parent has.
  if ($parent_paragraph->hasField('field_column')) {
    $columns = $parent_paragraph->get('field_column')->getValue();
    if (!empty($columns)) {

      // Loop through the columns and calculate the width.
      foreach ($columns as $column) {
        $paragraph_column = Paragraph::load($column['target_id']);
        if ($paragraph_column->hasField('field_column_width')) {
          $column_width = $paragraph_column->get('field_column_width')->value;
          $auto_width -= $column_width;
          if ($column_width == 'auto') {
            $auto_paragraphs++;
          }
        }
      }
    }
  }

  // Set the auto width based on the amount of auto width paragraphs.
  $paragraph_width = $paragraph->get('field_column_width')->value;
  $column_width = floor($paragraph_width == 'auto' ? floor($auto_width / $auto_paragraphs) : $paragraph_width);

  // Return the column width.
  return $column_width;
}
